{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/add-item/index.js","components/add-item/add-item.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearch","e","target","value","onSearchPanel","props","setState","this","type","placeholder","onChange","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","important","classNames","onClick","TodoList","todos","elements","map","item","id","itemProps","key","ItemStatusFilter","buttons","name","filter","onFilter","clazz","AddItem","onLabelChange","event","onSubmit","preventDefault","onAdd","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","el","slice","addItem","text","newItem","toggleProperty","search","arr","length","toLowerCase","indexOf","array","propName","oldItem","items","filterName","elem","filterItemsShow","filterItems","visibleItems","doneCount","todoCount","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.7399cad6.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport './app-header.css';\r\n\r\nconst AppHeader = ({toDo, done}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>Todo List</h1>\r\n            <h2>{toDo} more to do, {done} done</h2>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React, {Component} from 'react';\n\nimport './search-panel.css';\n\n\nexport default class SearchPanel extends Component {   \n\n    state = {\n        term: ''\n    };\n\n    onSearch = (e) => {\n\n        const term = e.target.value;\n        const {onSearchPanel} = this.props;\n\n        this.setState({\n            term\n        });\n\n        // вызываем функцию из пропсов компонента app и передаем текущее значение инпута\n        onSearchPanel(term);\n    };\n\n    render() {\n\n        const {term} = this.state;\n\n        return (\n            <input  type=\"text\"\n                    className=\"form-control search-input\" \n                    placeholder=\"search\"\n                    onChange={this.onSearch}\n                    value={ term }\n            />\n        );\n    }\n}","import React from 'react';\nimport './todo-list-item.css';\n\nconst TodoListItem = ({label, onDeleted, \n                       onToggleImportant,\n                       onToggleDone, \n                       important, done}) => {\n    \n    let classNames = 'todo-list-item';\n    \n    if(done) {\n        classNames += ' done';\n    }\n    if(important) {\n        classNames += ' important';\n    }\n\n    return (\n        <span className={ classNames }>\n            <span\n                className=\"todo-list-item-label\"\n                onClick={ onToggleDone }>\n                { label }\n            </span>\n            <button type=\"button\"\n                    className=\"btn btn-outline-success btn-sm float-right\"\n                    onClick={ onToggleImportant }>\n                <i className=\"fa fa-exclamation\" />\n            </button>\n            <button type=\"button\"\n                    className=\"btn btn-outline-danger btn-sm float-right\"\n                    onClick={ onDeleted }\n\n            >\n                <i className=\"fa fa-trash-o\" />\n            </button>\n        </span>\n    );\n};\n\nexport default TodoListItem;","import TodoList from './todo-list';\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\n// import style component\r\nimport './todo-list.css';\r\n\r\n// import TodoListItem\r\nimport TodoListItem from '../todo-list-item/todo-list-item';\r\n\r\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => { // Принимаем массив с данными из компонента выше через оператор деструктуризации\r\n\r\n    const elements = todos.map((item) => { // Проходим по массиву с данными и делаем массив из элементов списка в переменной elements\r\n\r\n        const {id, ...itemProps} = item; // деструктуризация объекта item. Мы выносим параметр id из объекта в переменную id, а остальные свойства (все, кроме id) будут записаны в объект itemProps через rest-параметр\r\n\r\n        return (\r\n            <li key={id} className=\"list-group-item\">\r\n                <TodoListItem \r\n                    {...itemProps}\r\n                    onDeleted={() => onDeleted(id)}\r\n                    onToggleImportant={ () => onToggleImportant(id) }\r\n                    onToggleDone={ () => onToggleDone(id) }\r\n                />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"list-group todo-list\">\r\n           {elements}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import ItemStatusFilter from './item-status-filter';\r\n\r\nexport default ItemStatusFilter;","import React, { Component } from 'react';\r\n\r\nimport './item-status-filter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n\r\n\r\n    buttons = [\r\n        {name: 'all', label: 'All'},\r\n        {name: 'active', label: 'Active'},\r\n        {name: 'done', label: 'Done'}\r\n    ];\r\n \r\n    render() {\r\n        const {filter, onFilter} = this.props;\r\n        const buttons = this.buttons.map( ({name, label}) => {\r\n        \r\n            const isActive = filter === name;\r\n            const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\r\n\r\n            return (\r\n                <button type=\"button\"\r\n                        className={`btn ${clazz}`}\r\n                        key={name}\r\n                        onClick={() => onFilter(name)}>{label}</button>\r\n            );\r\n        \r\n        });\r\n\r\n        return (\r\n            <div className=\"btn-group\">\r\n                {buttons}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import AddItem from './add-item';\r\n\r\nexport default AddItem;","import React, {Component} from 'react';\n\nimport './add-item.css';\n\nexport default class addItem extends Component {\n    state = {\n        label: ''\n    };\n\n    onLabelChange = (event) => {\n        this.setState({\n            label: event.target.value\n        });\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n\n        const {onAdd} = this.props;\n        const {label} = this.state;\n\n        onAdd(label);\n\n        this.setState({\n            label: ''\n        });\n    };\n\n    render() {\n\n        const {label} = this.state;\n\n        return (\n            <form className=\"add-item\" onSubmit={ this.onSubmit }>\n                <input type=\"text\" className=\"form-control\"\n                        onChange={this.onLabelChange}\n                        value={label}\n                        placeholder=\"What needs to be done?\"\n                />\n                <button className=\"btn btn-outline-secondary\">\n                    Add Item\n                </button>\n            </form>\n        );\n    };\n};","import App from './app';\r\n\r\nexport default App;","/* eslint-disable default-case */\nimport React, { Component } from 'react';\n\nimport AppHeader from '../app-header';\nimport SearchPanel from '../search-panel';\nimport TodoList from '../todo-list';\nimport ItemStatusFilter from '../item-status-filter';\nimport AddItem from '../add-item';\n\n// импорт стилей\nimport './app.css';\n\nexport default class App extends Component  {\n\n    maxId = 1; // Поле класса\n\n    state = { // создаём массив с объектами...\n        todoData: [\n            this.createTodoItem('Drink Coffee'),\n            this.createTodoItem('Make Awesome App'),\n            this.createTodoItem('Have a lunch')\n        ],\n        term: '',\n        filter: 'all' // all, active, done\n    };\n\n    createTodoItem(label) {\n        return {\n            label,\n            important: false,\n            done: false,\n            id: this.maxId++\n        }\n    }\n\n    deleteItem = (id) => {\n        this.setState(({todoData}) => {\n\n            const idx = todoData.findIndex((el) => el.id === id); // В массиве todoData с помощью метода findIndex, передав в качестве параметра функцию, параметром которой является сам элемент массива, мы сравниваем id в элементе массива и id, который приходит нам их \"нижних\" компонентов, и если id совпадают, тогда возвращаем индекс элемента массива. Таким образом, мы получаем индекс текущего item-а. \n\n            const newArray = [  // С помощью spread-оператора и метода slice, который возвращает новый массив от начального до конечного элемента, мы делаем новый массив из двух частей старого, до элемента, который мы удаляем из массива, и после. То есть, мы делаем массив со всеми старыми элементами, кроме того, который записан в переменную idx.\n                ...todoData.slice(0, idx),\n                ...todoData.slice(idx + 1)\n            ];\n\n            return {\n                todoData: newArray\n            };\n        });\n    };\n\n    addItem = (text) => {\n\n        if(text === '') { // Дополнительная проверка для того, чтобы не добавлялась пустая строка в список дел.\n            return false;\n        }\n        // generate id \n        const newItem = this.createTodoItem(text);\n\n        // add element in array \n        this.setState(({todoData}) => {\n\n            const newArray = [\n                ...todoData,\n                newItem\n            ];\n\n            return {\n                todoData: newArray\n            };\n        });\n    }\n\n\n    toggleProperty(array, id, propName) {\n        // 1. update object\n        const idx = array.findIndex((el) => el.id === id);\n\n        const oldItem = array[idx];\n\n        const newItem = {\n            ...oldItem,\n            [propName]: !oldItem[propName]\n        };\n        // 2. construct new array\n        return  [\n            ...array.slice(0, idx),\n            newItem,\n            ...array.slice(idx+1)\n        ];\n    }\n\n    onToggleImportant = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty( todoData, id, 'important' )\n            };\n        });\n    };\n\n    onToggleDone = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty( todoData, id, 'done' )\n            };\n        });\n    };\n\n    search = (arr, term) => {\n        if(term.length === 0) {  // Если строка ввода запроса поиска пуста, тогда возвращаем тот же самый массив, который получили в параметре\n            return arr;\n        }\n        // на массиве вызываем функцию filter, которая вернет новый массив с теми элементами, которые удовлетворяют условию запроса term\n        return arr.filter((item) => item.label.toLowerCase()\n                                              .indexOf(term.toLowerCase()) > -1 );\n    };\n\n    onSearchPanel = (term) => {\n        this.setState({\n            term\n        });\n    };\n\n    filterItems(items, filterName) {\n        switch(filterName) {\n            case 'all' :\n                return items;\n            case 'active' :\n                return items.filter( (elem) => !elem.done );\n            case 'done' :\n                return items.filter( (elem) => elem.done );\n            default :\n                return items;\n        }\n    }\n\n    onFilter = (name) => {\n        this.setState({\n            filter: name\n        });\n    }\n\n    render() {\n\n        const {todoData, term, filter} = this.state;\n\n        const filterItemsShow = this.filterItems(todoData, filter);\n\n        const visibleItems = this.search(filterItemsShow, term); // Отбираем те айтемы, которые вернет нам функция search...\n\n        const doneCount = todoData.filter((el) => el.done).length;\n        const todoCount = todoData.length - doneCount;\n\n        return (\n            <div className=\"todo-app\">\n                <AppHeader toDo={todoCount} done={doneCount} />\n                <div className=\"top-panel d-flex\">\n                    <SearchPanel onSearchPanel={this.onSearchPanel} />\n                    <ItemStatusFilter filter={filter}\n                                      onFilter={this.onFilter}\n                    />\n                </div>\n                <TodoList todos={visibleItems}\n                          onDeleted={ this.deleteItem }  \n                          onToggleImportant={ this.onToggleImportant }\n                          onToggleDone={ this.onToggleDone }  \n                />\n                <AddItem onAdd={this.addItem} />\n            </div>\n        );\n    };\n};\n","// импорт библиотек\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\n// импорт компонентов\nimport App from './components/app';\n\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}